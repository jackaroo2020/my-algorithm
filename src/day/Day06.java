package day;
/**
@description  描述:
在下面这个1000位正整数中，连续4个数字的最大乘积是
9 × 9 × 8 × 9 = 5832。
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450
找出这个1000位正整数中乘积最大的连续13个数字。它们的乘积是多少？
 *
思路：
也就是相邻的13个数相乘，直到循环完，然后返回最大的。digit要减去48，是因为char类型是返回的ascii码，‘0’的ascii码就是48，
也可以用Character的digit方法。如果digit为0，那么只要和他相乘的结果都为0 ，
也就不用再乘了，所以i+=max-1，要往后移动12位，然后上面再执行i++，相当于往后移动了13位。
 *
@author  LT
@date  2020/7/17
 */
public class Day06 {

    private static final String str = "73167176531330624919225119674426574742355349194934" +
            "96983520312774506326239578318016984801869478851843" +
            "85861560789112949495459501737958331952853208805511" +
            "12540698747158523863050715693290963295227443043557" +
            "66896648950445244523161731856403098711121722383113" +
            "62229893423380308135336276614282806444486645238749" +
            "30358907296290491560440772390713810515859307960866" +
            "70172427121883998797908792274921901699720888093776" +
            "65727333001053367881220235421809751254540594752243" +
            "52584907711670556013604839586446706324415722155397" +
            "53697817977846174064955149290862569321978468622482" +
            "83972241375657056057490261407972968652414535100474" +
            "82166370484403199890008895243450658541227588666881" +
            "16427171479924442928230863465674813919123162824586" +
            "17866458359124566529476545682848912883142607690042" +
            "24219022671055626321111109370544217506941658960408" +
            "07198403850962455444362981230987879927244284909188" +
            "84580156166097919133875499200524063689912560717606" +
            "05886116467109405077541002256983155200055935729725" +
            "71636269561882670428252483600823257530420752963450";

    public static long largestProduct(int max) {
        long sum = 0;
        int len = str.length();
        for (int i = 0; i < len-max; i++) {
            long product = 1;
            for (int j = i; j < i+max; j++) {
                int digit = (str.charAt(j) -48);
                if (digit == 0) {
                    i += max -1;
                    break;
                }
                product *= digit;
            }
            if (product>sum) {
                sum = product;
            }
            if (product == 23514624000L) {
                System.out.println(i);
            }
        }
        return sum;
    }

    public static void main(String[] args) {
        //23514624000
        System.out.println(largestProduct(13));
    }


}
