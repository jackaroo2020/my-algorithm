#!usr/bin/env python
# -*- encoding=utf8 -*-

'''
汉诺塔移动的原理： 
汉诺塔是将所有盘子（n个）从A柱挪至C柱，大盘必须在小盘下方。注意却分思路和具体步骤。
思路:
为将n-1个盘子（除了最底下一枚）从A移到B（第一步）; 然后将位于A的最后一枚最大盘移至C（第二步）; 再将B柱上所有盘移至C柱（第三步）。
'''
__author__ = "LT"


def move(n, a, b, c):
    if n==1: #n值为1 而非定义n=1 
        return print(a,'-->',c)#只有一个盘的时候，a移动到c；
    move(n-1,a,c,b) #（第一步）进入递归，直到n-1==1时，实现a->b  传入递归的参数的n值改变,递归结束后n值恢复，注意传入函数的参数的位置；
    move(1,a,b,c) #（第二步）接着执行，调用自身函数实现a->c，可替换为print(a,'->',c)，因为只是将A柱底最大盘移至C柱的过程（第二步）； 
    move(n-1,b,a,c) #（第三步）将位于b处的n-1个盘从b经由a移至c ，上一个递归后n恢复为调用函数传入的n，进入递归，实现b->c；

move(3, 'A', 'B', 'C')

